var documenterSearchIndex = {"docs":
[{"location":"links/#Further-reading","page":"Further reading","title":"Further reading","text":"","category":"section"},{"location":"links/","page":"Further reading","title":"Further reading","text":"For more information about OAuth2 and authentication for Azure, please refer to:","category":"page"},{"location":"links/","page":"Further reading","title":"Further reading","text":"https://docs.microsoft.com/en-us/rest/api/storageservices/authenticate-with-azure-active-directory","category":"page"},{"location":"links/","page":"Further reading","title":"Further reading","text":"For more information on authentication via a VM identity:","category":"page"},{"location":"links/","page":"Further reading","title":"Further reading","text":"https://docs.microsoft.com/en-us/azure/active-directory/managed-identities-azure-resources/how-to-use-vm-token","category":"page"},{"location":"links/","page":"Further reading","title":"Further reading","text":"For more information on authentication via client credentials:","category":"page"},{"location":"links/","page":"Further reading","title":"Further reading","text":"https://docs.microsoft.com/en-us/azure/active-directory/develop/v2-oauth2-client-creds-grant-flow","category":"page"},{"location":"links/","page":"Further reading","title":"Further reading","text":"Please note that we only support authentication via a shared-secret, and not via a certificate.","category":"page"},{"location":"links/","page":"Further reading","title":"Further reading","text":"For more information on authentication via the authorization code grant flow:","category":"page"},{"location":"links/","page":"Further reading","title":"Further reading","text":"https://docs.microsoft.com/en-us/azure/active-directory/develop/v2-oauth2-auth-code-flow","category":"page"},{"location":"links/","page":"Further reading","title":"Further reading","text":"For more information on authentication via the device code flow:","category":"page"},{"location":"links/","page":"Further reading","title":"Further reading","text":"https://docs.microsoft.com/en-us/azure/active-directory/develop/v2-oauth2-device-code","category":"page"},{"location":"reference/#Reference","page":"Reference","title":"Reference","text":"","category":"section"},{"location":"reference/","page":"Reference","title":"Reference","text":"AzSession\ntoken\nscrub!\nAzSessions.write_manifest","category":"page"},{"location":"reference/#AzSessions.AzSession","page":"Reference","title":"AzSessions.AzSession","text":"session = AzSession([; kwargs...])\n\nCreate an Azure session for authentication using a specific authentication protocol.  The available protocols and their kwargs are as follows.\n\nAuthorization code flow\n\nsession = AzSession(;\n    protocol = _manifest[\"protocol\"] | AzDeviceCodeFlowCredentials,\n    client_id = AzSessions._manifest[\"client_id\"],\n    redirect_uri = \"http://localhost:44300/reply\",\n    scope = \"openid+offline_access+https://storage.azure.com/user_impersonation\",\n    scope_auth = \"openid+offline_access+https://management.azure.com/user_impersonation+https://storage.azure.com/user_impersonation\",\n    tenant = AzSessions._manifest[\"tenant\"],\n    lazy = false,\n    clearcache = false)\n\nDevice code flow\n\nsession = AzSession(;\n    protocol = AzDeviceCodeCredentials\n    client_id = AzSessions._manifest[\"client_id\"],\n    scope = \"openid+offline_access+https://management.azure.com/user_impersonation\",\n    scope_auth = \"openid+offline_access+https://management.azure.com/user_impersonation+https://storage.azure.com/user_impersonation\",\n    tenant = AzSessions._manifest[\"tenant\"],\n    clearcache = false)\n\nClient Credentials\n\nsession = AzSession(;\n    protocol = AzClientCredentials,\n    tenant=\"chevron.onmicrosoft.com\",\n    client_id=AzSessions._manifest[\"client_id\"],\n    client_secret=AzSessions._manifest[\"client_secret\"],\n    resource=\"https://management.azure.com/\",\n    clearcache = false)\n\nVM Credentials\n\nsession = AzSession(;\n    protocol = AzVMCredentials,\n    resource = \"https://management.azure.com/\",\n    clearcache = false)\n\nNew audience\n\nCreate a session from an existing auth code flow session or device code flow session, but with a new scope.  This means that we can get a session with a new audience without requiring re-authentication.  Note that the new scope must be in session.scope_auth.\n\nsession = AzSession(;\n    protocol=AzAuthCodeFlowCredentials,\n    scope_auth=\"openid+offline_access+https://management.azure.com/user_impersonation+https://storage.azure.com/user_impersonation\",\n    scope=\"openid+offline_access+https://management.azure.com/user_impersonation\")\n\nt = token(session) # token for `https://management.azure.com` audience\nsession = AzSession(session; scope=\"openid+offline_access+https://storage.azure.com/user_impersonation\")\nt = token(session) # token for `https://storage.azure.com` audience without needing to re-authenticate\n\nNotes\n\nIf lazy=false, then authenticate at the time of construction.  Otherwise, wait until the first use of the session before authenticating.\nIf clearcache=false, then check the session-cache for an existing token rather than re-authenticating.  The cache is stored in a JSON file (~/.azsessions/sessions.json).\nThe default protocol can be set in the manifest (see the AzSessions.write_manifest method for more information).\n\n\n\n\n\n","category":"function"},{"location":"reference/#AzSessions.token","page":"Reference","title":"AzSessions.token","text":"token(session[; offset=Second(300+rand(0:600))])\n\nReturn the OAuth2 token associate with session.  The offset ensures that the token is valid for at least offset time.  The default offset is randomized between 5 and 15 minutes.  We randomize the offset to avoid calling the Azure authentication end-point at the same time from many VMs operating in parallel.\n\n\n\n\n\n","category":"function"},{"location":"reference/#AzSessions.scrub!","page":"Reference","title":"AzSessions.scrub!","text":"scrub!(session)\n\nRemove sensitive information from session (e.g. token, client secret)\n\n\n\n\n\n","category":"function"},{"location":"reference/#AzSessions.write_manifest","page":"Reference","title":"AzSessions.write_manifest","text":"AzSessions.write_manifest(;client_id=\"\", client_secret=\"\", tenant=\"\", protocol=\"\")\n\nWrite an AzSessions manifest file (~/.azsessions/manifest.json).  The manifest file contains account specific credentials.\n\nNotes\n\nclient secret\n\nThe client can be configured such that the client_secret is not required for the authorization-code-flow and device-code-flow.  In this scenario, one may choose to omit setting the client_secret in the manifest. For example:\n\nAzSessions.write_manifest(;client_id=\"myclientid\", tenant=\"mytenant\")\n\nprotocol\n\nThe protocol is one of \"AzAuthCodeFlowCredentials\", \"AzDeviceCodeFlowCredentials\", \"AzClientCredentials\" and \"AzVMCredentials\".  If the default protocol=\"\" is chosen for the manifest, then AzSession() will default to AzDeviceCodeFlowCredentials.  The protocol in the manifest can always be over-ridden using the protocol argument to AzSession.\n\n\n\n\n\n","category":"function"},{"location":"#AzSessions","page":"AzSessions","title":"AzSessions","text":"","category":"section"},{"location":"","page":"AzSessions","title":"AzSessions","text":"Authentication for Azure Cloud using Active Directory (OAuth2).  At present, this package supports 1) VM credentials, 2) client credentials, 3) authorization code flow and 4) device code flow.","category":"page"},{"location":"#Setup","page":"AzSessions","title":"Setup","text":"","category":"section"},{"location":"","page":"AzSessions","title":"AzSessions","text":"AzSessions keeps state in the ~/.azsessions folder .  In particular, it 1) uses ~/.azsession/sessions.json to store OAuth2 tokens, and 2) uses ~/.azsession/manifest.json to store information specific to your Azure account.","category":"page"},{"location":"","page":"AzSessions","title":"AzSessions","text":"Use AzSessions to create the manifest.json file:","category":"page"},{"location":"","page":"AzSessions","title":"AzSessions","text":"AzSessions.write_manifest(;client_id=\"myclientid\", client_secret=\"myclientsecret\", tenant=\"mytenant\")","category":"page"},{"location":"","page":"AzSessions","title":"AzSessions","text":"or in the case that you do not have access to the client_secret:","category":"page"},{"location":"","page":"AzSessions","title":"AzSessions","text":"AzSessions.write_manifest(;client_id=\"myclientid\", tenant=\"mytenant\")","category":"page"},{"location":"","page":"AzSessions","title":"AzSessions","text":"Once the manifest.json file exists, AzSessions will use its values as defaults. For example, when using client credentials to authenticate, AzSessions will use the client_id, client_secret and tenant  in manifest.json.  On the other hand, when using the authorization code flow or the device code flow, AzSessions will use the client_id and the tenant but will not use the client_secret.The later is especially useful if you are working in an environment where your adminstrator does not share the client_secret with the users.","category":"page"},{"location":"","page":"AzSessions","title":"AzSessions","text":"Note that the manifest can also be used to store your preferred protocol.  For example:","category":"page"},{"location":"","page":"AzSessions","title":"AzSessions","text":"AzSessions.write_manifest(;client_id=\"myclientid\", client_secret=\"mycientsecret\", tenant=\"mytenant\", protocol=AzClientCredentials)","category":"page"},{"location":"example/#Examples","page":"Examples","title":"Examples","text":"","category":"section"},{"location":"example/","page":"Examples","title":"Examples","text":"using AzSessions\n\n# VM identity authentication\nsession = AzSession(;protocol=AzVMCredentials)\nt = token(session)\n\n# Client credentials authentication\nsession = AzSession(;protocol=AzClientCredentials, client_id=\"myclientid\", client_secret=\"xxxxxxxxxxxxxxx\")\nt = token(session)\n\n# Device code  flow authentication\nsession = AzSession()\nt = token(session)\n\n# ...or...\nsession = AzSession(;protocol=AzDeviceCodeFlowCredentials)\nt = token(session)\n\n# Authorization code flow authentication\nsession = AzSession(;protocol=AzAuthCodeFlowCredentials)\nt = token(session)","category":"page"}]
}
